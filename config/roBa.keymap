#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LS(EXCLAMATION)  &kp W           &kp E      &kp R          &kp T                                                                    &kp Y            &kp U  &kp I        &lt 6 O  &kp RS(QUESTION)
&kp A                &kp S           &kp D      &kp F          &kp G               &trans                                  &trans       &kp H            &kp J  &kp K        &kp L    &lt 2 P
&mt LEFT_SHIFT Z     &kp INT_HENKAN  &kp MINUS  &kp V          &kp B               &trans                                  &trans       &kp N            &kp M  &lt 5 COMMA  &kp DOT  &kp RG(Z)
&kp LCTRL            &kp X           &kp C      &mt LCTRL TAB  &mt LEFT_GUI SPACE  &mt LEFT_SHIFT LANG_ZENKAKUHANKAKU      &lt 3 ENTER  &lt 1 BACKSPACE                               &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp RG(RIGHT)         &kp RC(LEFT)      &kp RC(UP_ARROW)  &kp RC(RIGHT)      &kp C_VOLUME_UP
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LG(LEFT)          &kp RG(RA(LEFT))  &kp UP_ARROW      &kp RA(RG(RIGHT))  &kp C_VOLUME_DOWN
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp RS(RG(NUMBER_4))  &kp LEFT          &kp DOWN          &kp RIGHT          &kp RS(RG(N5))
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                       &trans
            >;
        };

        NUM {
            bindings = <
&kp LS(LEFT_PARENTHESIS)  &kp LS(RIGHT_PARENTHESIS)  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1                      &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp RS(DOUBLE_QUOTES)  &kp RS(COLON)
&kp LEFT_BRACKET          &kp RIGHT_BRACKET          &kp NUMBER_6  &kp NUMBER_5  &kp NUMBER_4  &trans      &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp RS(SLASH)          &trans
&kp LEFT_SHIFT            &kp NUMBER_0               &kp NUMBER_9  &kp NUMBER_8  &kp NUMBER_7  &trans      &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0        &trans
&trans                    &trans                     &trans        &trans        &trans        &trans      &trans  &kp BACKSPACE                                                             &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &kp RG(T)  &kp RG(X)               &kp RG(C)      &kp RG(V)         &kp RG(RS(V))
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &kp RG(W)  &kp RC(RA(D))           &kp RC(RA(F))  &kp RC(RA(G))     &kp RS(RG(T))
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &kp RG(N)  &kp RS(RG(LEFT_ARROW))  &kp RG(A)      &kp RS(RG(DOWN))  &kp RS(RA(RG(I)))
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                                                              &kp RG(R)
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &kp RS(NUMBER_4)  &kp RS(NUMBER_3)  &kp RS(NUMBER_2)                           &kp RS(RC(RG(Y)))  &kp RC(RG(W))  &kp RC(RG(U))      &trans  &kp RS(RA(RG(I)))
&trans  &trans  &kp LS(NUMBER_7)  &kp LS(NUMBER_6)  &kp RS(N5)        &trans      &trans       &kp RS(RG(P))      &kp RS(RG(O))  &kp RA(SPACE)      &trans  &kp RG(D)
&trans  &trans  &trans            &trans            &kp LS(NUMBER_8)  &trans      &bootloader  &kp RS(RG(E))      &kp RS(RA(Q))  &kp RS(RG(SPACE))  &trans  &trans
&trans  &trans  &trans            &trans            &trans            &trans      &trans       &trans                                                       &trans
            >;
        };
    };
};
